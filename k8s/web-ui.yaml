apiVersion: v1
kind: ConfigMap
metadata:
  name: gpu-monitor-ui-config
  namespace: gpu-monitoring
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="ja">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>GPUÁõ£Ë¶ñ„É¢„Éã„Çø„Éº</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }

            .container {
                max-width: 1200px;
                margin: 0 auto;
            }

            .header {
                text-align: center;
                color: white;
                margin-bottom: 30px;
            }

            .header h1 {
                font-size: 2.5rem;
                margin-bottom: 10px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }

            .header p {
                font-size: 1.1rem;
                opacity: 0.9;
            }

            .dashboard {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                gap: 20px;
                margin-bottom: 30px;
            }

            .card {
                background: rgba(255, 255, 255, 0.95);
                border-radius: 15px;
                padding: 25px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255,255,255,0.2);
            }

            .card h3 {
                color: #333;
                margin-bottom: 20px;
                font-size: 1.3rem;
                border-bottom: 2px solid #667eea;
                padding-bottom: 10px;
            }

            .metric {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 15px;
                padding: 10px;
                background: rgba(102, 126, 234, 0.1);
                border-radius: 8px;
            }

            .metric-label {
                font-weight: 600;
                color: #555;
            }

            .metric-value {
                font-weight: bold;
                font-size: 1.1rem;
                color: #667eea;
            }

            .progress-bar {
                width: 100%;
                height: 20px;
                background: #e0e0e0;
                border-radius: 10px;
                overflow: hidden;
                margin-top: 10px;
            }

            .progress-fill {
                height: 100%;
                background: linear-gradient(90deg, #4CAF50, #FFC107, #FF5722);
                border-radius: 10px;
                transition: width 0.3s ease;
            }

            .status {
                display: inline-block;
                padding: 5px 12px;
                border-radius: 20px;
                font-size: 0.9rem;
                font-weight: bold;
            }

            .status.online {
                background: #4CAF50;
                color: white;
            }

            .status.offline {
                background: #f44336;
                color: white;
            }

            .refresh-btn {
                position: fixed;
                bottom: 30px;
                right: 30px;
                background: #667eea;
                color: white;
                border: none;
                border-radius: 50px;
                padding: 15px 25px;
                font-size: 1rem;
                cursor: pointer;
                box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
                transition: all 0.3s ease;
            }

            .refresh-btn:hover {
                background: #5a67d8;
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
            }

            .loading {
                text-align: center;
                color: white;
                font-size: 1.2rem;
                margin: 50px 0;
            }

            .error {
                background: rgba(244, 67, 54, 0.1);
                border: 1px solid #f44336;
                color: #d32f2f;
                padding: 15px;
                border-radius: 8px;
                margin: 20px 0;
            }

            @media (max-width: 768px) {
                .dashboard {
                    grid-template-columns: 1fr;
                }
                
                .header h1 {
                    font-size: 2rem;
                }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üñ•Ô∏è GPUÁõ£Ë¶ñ„É¢„Éã„Çø„Éº</h1>
                <p>Kubernetes„ÇØ„É©„Çπ„Çø„Éº‰∏ä„ÅÆGPU‰ΩøÁî®Áä∂Ê≥Å„Çí„É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ</p>
            </div>

            <div id="loading" class="loading">
                „Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...
            </div>

            <div id="error" class="error" style="display: none;">
                „Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇPrometheus„Çµ„Éº„Éê„Éº„ÅåËµ∑Âãï„Åó„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            </div>

            <div id="dashboard" class="dashboard" style="display: none;">
                <!-- „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅØJavaScript„ÅßÂãïÁöÑ„Å´ÁîüÊàê -->
            </div>
        </div>

        <button class="refresh-btn" onclick="refreshData()">
            üîÑ Êõ¥Êñ∞
        </button>

        <script>
            class GPUMonitor {
                constructor() {
                    this.prometheusUrl = '/api/prometheus';
                    this.refreshInterval = 30000;
                    this.autoRefreshTimer = null;
                    this.init();
                }

                init() {
                    this.loadData();
                    this.startAutoRefresh();
                }

                async loadData() {
                    try {
                        document.getElementById('loading').style.display = 'block';
                        document.getElementById('error').style.display = 'none';
                        document.getElementById('dashboard').style.display = 'none';

                        const [nodeData, podData, hardwareData] = await Promise.all([
                            this.fetchNodeMetrics(),
                            this.fetchPodMetrics(),
                            this.fetchHardwareInfo()
                        ]);

                        this.renderDashboard(nodeData, podData, hardwareData);

                        document.getElementById('loading').style.display = 'none';
                        document.getElementById('dashboard').style.display = 'grid';
                    } catch (error) {
                        console.error('„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
                        document.getElementById('loading').style.display = 'none';
                        document.getElementById('error').style.display = 'block';
                    }
                }

                async fetchNodeMetrics() {
                    const queries = [
                        'DCGM_FI_DEV_GPU_UTIL',
                        'DCGM_FI_DEV_MEM_COPY_UTIL',
                        'DCGM_FI_DEV_FB_USED',
                        'DCGM_FI_DEV_FB_TOTAL',
                        'DCGM_FI_DEV_POWER_USAGE',
                        'DCGM_FI_DEV_GPU_TEMP'
                    ];

                    const results = {};
                    for (const query of queries) {
                        try {
                            const response = await fetch(`${this.prometheusUrl}/api/v1/query?query=${encodeURIComponent(query)}`);
                            const data = await response.json();
                            results[query] = data.data.result;
                        } catch (error) {
                            console.warn(`„ÇØ„Ç®„É™ ${query} „ÅÆÂèñÂæó„Å´Â§±Êïó:`, error);
                            results[query] = [];
                        }
                    }

                    return this.processNodeData(results);
                }

                async fetchPodMetrics() {
                    const query = 'DCGM_FI_DEV_GPU_UTIL{pod!=""}';
                    try {
                        const response = await fetch(`${this.prometheusUrl}/api/v1/query?query=${encodeURIComponent(query)}`);
                        const data = await response.json();
                        return this.processPodData(data.data.result);
                    } catch (error) {
                        console.warn('„Éù„ÉÉ„Éâ„É°„Éà„É™„ÇØ„Çπ„ÅÆÂèñÂæó„Å´Â§±Êïó:', error);
                        return [];
                    }
                }

                async fetchHardwareInfo() {
                    // „Åæ„ÅöÂà©Áî®ÂèØËÉΩ„Å™„É°„Éà„É™„ÇØ„Çπ„ÇíÁ¢∫Ë™ç
                    try {
                        const response = await fetch(`${this.prometheusUrl}/api/v1/label/__name__/values`);
                        const data = await response.json();
                        const availableMetrics = data.data || [];
                        console.log('Âà©Áî®ÂèØËÉΩ„Å™„É°„Éà„É™„ÇØ„Çπ:', availableMetrics.filter(m => m.includes('DCGM')));
                    } catch (error) {
                        console.warn('„É°„Éà„É™„ÇØ„Çπ‰∏ÄË¶ß„ÅÆÂèñÂæó„Å´Â§±Êïó:', error);
                    }

                    const queries = [
                        'DCGM_FI_DRIVER_VERSION',
                        'DCGM_FI_DEV_NAME',
                        'DCGM_FI_DEV_BRAND',
                        'DCGM_FI_DEV_FB_TOTAL',
                        'DCGM_FI_DEV_CC_MAJOR',
                        'DCGM_FI_DEV_CC_MINOR',
                        'DCGM_FI_DEV_MULTIPROCESSOR_COUNT',
                        'DCGM_FI_DEV_POWER_MGMT_LIMIT',
                        'DCGM_FI_DEV_GPU_UTIL',
                        // ‰ª£Êõø„É°„Éà„É™„ÇØ„ÇπÂêç„ÇÇË©¶Ë°å
                        'dcgm_gpu_utilization',
                        'dcgm_fb_total'
                    ];

                    const results = {};
                    for (const query of queries) {
                        try {
                            const response = await fetch(`${this.prometheusUrl}/api/v1/query?query=${encodeURIComponent(query)}`);
                            const data = await response.json();
                            if (data.data && data.data.result && data.data.result.length > 0) {
                                results[query] = data.data.result;
                                console.log(`„É°„Éà„É™„ÇØ„Çπ ${query} „ÅåÂà©Áî®ÂèØËÉΩ:`, data.data.result.length, 'ÂÄã„ÅÆ„Çµ„É≥„Éó„É´');
                            } else {
                                results[query] = [];
                            }
                        } catch (error) {
                            console.warn(`„Éè„Éº„Éâ„Ç¶„Çß„Ç¢ÊÉÖÂ†±„ÇØ„Ç®„É™ ${query} „ÅÆÂèñÂæó„Å´Â§±Êïó:`, error);
                            results[query] = [];
                        }
                    }

                    return this.processHardwareData(results);
                }

                processHardwareData(results) {
                    const hardware = new Map();

                    // Âà©Áî®ÂèØËÉΩ„Å™„É°„Éà„É™„ÇØ„Çπ„Åã„ÇâGPUÊÉÖÂ†±„ÇíÂàùÊúüÂåñ
                    // „Åæ„ÅöGPU‰ΩøÁî®Áéá„É°„Éà„É™„ÇØ„Çπ„Åã„ÇâGPU„ÇíÁâπÂÆö
                    const gpuUtilMetrics = results['DCGM_FI_DEV_GPU_UTIL'] || results['dcgm_gpu_utilization'] || [];
                    
                    gpuUtilMetrics.forEach(metric => {
                        const node = metric.metric.node || metric.metric.instance || 'unknown';
                        const gpu = metric.metric.gpu || metric.metric.GPU || metric.metric.device || '0';
                        const nodeKey = `${node}`;
                        
                        if (!hardware.has(nodeKey)) {
                            hardware.set(nodeKey, {
                                node: node,
                                gpus: new Map(),
                                driverVersion: ''
                            });
                        }

                        hardware.get(nodeKey).gpus.set(gpu, {
                            id: gpu,
                            name: 'GPU ' + gpu, // „Éá„Éï„Ç©„É´„ÉàÂêç
                            brand: '',
                            memoryTotal: 0,
                            computeCapabilityMajor: 0,
                            computeCapabilityMinor: 0,
                            multiprocessorCount: 0,
                            powerLimit: 0
                        });
                    });

                    // GPUÂêç„ÅÆË®≠ÂÆö
                    const nameMetrics = results['DCGM_FI_DEV_NAME'] || [];
                    nameMetrics.forEach(metric => {
                        const node = metric.metric.node || metric.metric.instance || 'unknown';
                        const gpu = metric.metric.gpu || metric.metric.GPU || metric.metric.device || '0';
                        const gpuName = metric.value[1] || 'Unknown GPU';
                        const nodeKey = `${node}`;
                        
                        if (hardware.has(nodeKey) && hardware.get(nodeKey).gpus.has(gpu)) {
                            hardware.get(nodeKey).gpus.get(gpu).name = gpuName;
                        }
                    });

                    // „É°„É¢„É™Á∑èÈáè„ÅÆË®≠ÂÆö
                    const memoryMetrics = results['DCGM_FI_DEV_FB_TOTAL'] || results['dcgm_fb_total'] || [];
                    memoryMetrics.forEach(metric => {
                        const node = metric.metric.node || metric.metric.instance || 'unknown';
                        const gpu = metric.metric.gpu || metric.metric.GPU || metric.metric.device || '0';
                        const memoryTotal = parseFloat(metric.value[1]) || 0;
                        const nodeKey = `${node}`;
                        
                        if (hardware.has(nodeKey) && hardware.get(nodeKey).gpus.has(gpu)) {
                            hardware.get(nodeKey).gpus.get(gpu).memoryTotal = memoryTotal;
                        }
                    });

                    // ÂêÑÁ®Æ„Éè„Éº„Éâ„Ç¶„Çß„Ç¢ÊÉÖÂ†±„ÇíËøΩÂä†
                    const fieldMapping = {
                        'DCGM_FI_DEV_BRAND': 'brand',
                        'DCGM_FI_DEV_CC_MAJOR': 'computeCapabilityMajor',
                        'DCGM_FI_DEV_CC_MINOR': 'computeCapabilityMinor',
                        'DCGM_FI_DEV_MULTIPROCESSOR_COUNT': 'multiprocessorCount',
                        'DCGM_FI_DEV_POWER_MGMT_LIMIT': 'powerLimit'
                    };

                    Object.entries(fieldMapping).forEach(([query, field]) => {
                        if (results[query] && results[query].length > 0) {
                            results[query].forEach(metric => {
                                const node = metric.metric.node || metric.metric.instance || 'unknown';
                                const gpu = metric.metric.gpu || metric.metric.GPU || metric.metric.device || '0';
                                const nodeKey = `${node}`;
                                
                                if (hardware.has(nodeKey) && hardware.get(nodeKey).gpus.has(gpu)) {
                                    const value = metric.value[1];
                                    if (typeof value === 'string' && isNaN(value)) {
                                        hardware.get(nodeKey).gpus.get(gpu)[field] = value;
                                    } else {
                                        hardware.get(nodeKey).gpus.get(gpu)[field] = parseFloat(value) || 0;
                                    }
                                }
                            });
                        }
                    });

                    // „Éâ„É©„Ç§„Éê„Éº„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÇíËøΩÂä†
                    const driverMetrics = results['DCGM_FI_DRIVER_VERSION'] || [];
                    driverMetrics.forEach(metric => {
                        const node = metric.metric.node || metric.metric.instance || 'unknown';
                        const nodeKey = `${node}`;
                        
                        if (hardware.has(nodeKey)) {
                            hardware.get(nodeKey).driverVersion = metric.value[1] || '';
                        }
                    });

                    console.log('Âá¶ÁêÜ„Åï„Çå„Åü„Éè„Éº„Éâ„Ç¶„Çß„Ç¢„Éá„Éº„Çø:', hardware);
                    return Array.from(hardware.values());
                }

                processNodeData(results) {
                    const nodes = new Map();

                    results['DCGM_FI_DEV_GPU_UTIL']?.forEach(metric => {
                        const node = metric.metric.node || metric.metric.instance || 'unknown';
                        const gpu = metric.metric.gpu || metric.metric.GPU || '0';
                        const nodeKey = `${node}`;
                        
                        if (!nodes.has(nodeKey)) {
                            nodes.set(nodeKey, {
                                name: node,
                                gpus: new Map(),
                                status: 'online'
                            });
                        }

                        nodes.get(nodeKey).gpus.set(gpu, {
                            id: gpu,
                            utilization: parseFloat(metric.value[1]) || 0,
                            memoryUsed: 0,
                            memoryTotal: 0,
                            power: 0,
                            temperature: 0
                        });
                    });

                    // ‰ªñ„ÅÆ„É°„Éà„É™„ÇØ„Çπ„ÇÇÂêåÊßò„Å´Âá¶ÁêÜ...
                    return Array.from(nodes.values());
                }

                processPodData(results) {
                    const pods = new Map();

                    results.forEach(metric => {
                        const podName = metric.metric.pod || metric.metric.kubernetes_pod_name || 'unknown';
                        const node = metric.metric.node || metric.metric.instance || 'unknown';
                        const gpu = metric.metric.gpu || metric.metric.GPU || '0';
                        const utilization = parseFloat(metric.value[1]) || 0;

                        const podKey = `${podName}-${node}`;
                        
                        if (!pods.has(podKey)) {
                            pods.set(podKey, {
                                name: podName,
                                node: node,
                                gpus: new Map()
                            });
                        }

                        pods.get(podKey).gpus.set(gpu, {
                            id: gpu,
                            utilization: utilization
                        });
                    });

                    return Array.from(pods.values());
                }

                renderDashboard(nodeData, podData, hardwareData) {
                    const dashboard = document.getElementById('dashboard');
                    dashboard.innerHTML = '';

                    const summaryCard = this.createSummaryCard(nodeData, podData);
                    dashboard.appendChild(summaryCard);

                    // „Éè„Éº„Éâ„Ç¶„Çß„Ç¢ÊÉÖÂ†±„Ç´„Éº„Éâ„ÇíË°®Á§∫
                    if (hardwareData && hardwareData.length > 0) {
                        const hardwareCard = this.createHardwareCard(hardwareData);
                        dashboard.appendChild(hardwareCard);
                    }

                    nodeData.forEach(node => {
                        const nodeCard = this.createNodeCard(node);
                        dashboard.appendChild(nodeCard);
                    });

                    if (podData.length > 0) {
                        const podCard = this.createPodCard(podData);
                        dashboard.appendChild(podCard);
                    }
                }

                createSummaryCard(nodeData, podData) {
                    const card = document.createElement('div');
                    card.className = 'card';

                    const totalGPUs = nodeData.reduce((sum, node) => sum + node.gpus.size, 0);
                    const totalPods = podData.length;
                    const avgUtilization = nodeData.reduce((sum, node) => {
                        const nodeAvg = Array.from(node.gpus.values()).reduce((s, gpu) => s + gpu.utilization, 0) / node.gpus.size || 0;
                        return sum + nodeAvg;
                    }, 0) / nodeData.length || 0;

                    card.innerHTML = `
                        <h3>üìä „ÇØ„É©„Çπ„Çø„ÉºÊ¶ÇË¶Å</h3>
                        <div class="metric">
                            <span class="metric-label">Á∑è„Éé„Éº„ÉâÊï∞</span>
                            <span class="metric-value">${nodeData.length}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">Á∑èGPUÊï∞</span>
                            <span class="metric-value">${totalGPUs}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">GPU‰ΩøÁî®„Éù„ÉÉ„ÉâÊï∞</span>
                            <span class="metric-value">${totalPods}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">Âπ≥ÂùáGPU‰ΩøÁî®Áéá</span>
                            <span class="metric-value">${avgUtilization.toFixed(1)}%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${avgUtilization}%"></div>
                        </div>
                        <div style="margin-top: 15px; font-size: 0.9rem; color: #666;">
                            ÊúÄÁµÇÊõ¥Êñ∞: ${new Date().toLocaleString('ja-JP')}
                        </div>
                    `;

                    return card;
                }

                createHardwareCard(hardwareData) {
                    const card = document.createElement('div');
                    card.className = 'card';

                    // ÂÖ®GPU„ÅÆÁµ±Ë®àÊÉÖÂ†±„ÇíË®àÁÆó
                    let totalGPUs = 0;
                    let gpuModels = new Map();
                    let totalMemory = 0;
                    let driverVersions = new Set();

                    hardwareData.forEach(nodeHw => {
                        totalGPUs += nodeHw.gpus.size;
                        if (nodeHw.driverVersion) {
                            driverVersions.add(nodeHw.driverVersion);
                        }

                        Array.from(nodeHw.gpus.values()).forEach(gpu => {
                            const modelKey = gpu.name || 'Unknown';
                            if (!gpuModels.has(modelKey)) {
                                gpuModels.set(modelKey, {
                                    count: 0,
                                    totalMemory: 0,
                                    computeCapability: '',
                                    powerLimit: 0
                                });
                            }
                            const model = gpuModels.get(modelKey);
                            model.count++;
                            model.totalMemory += gpu.memoryTotal;
                            if (gpu.computeCapabilityMajor && gpu.computeCapabilityMinor) {
                                model.computeCapability = `${gpu.computeCapabilityMajor}.${gpu.computeCapabilityMinor}`;
                            }
                            if (gpu.powerLimit > model.powerLimit) {
                                model.powerLimit = gpu.powerLimit;
                            }
                            totalMemory += gpu.memoryTotal;
                        });
                    });

                    card.innerHTML = `
                        <h3>üîß „Éè„Éº„Éâ„Ç¶„Çß„Ç¢ÊÉÖÂ†±</h3>
                        
                        <div class="metric">
                            <span class="metric-label">Á∑èGPUÊï∞</span>
                            <span class="metric-value">${totalGPUs}</span>
                        </div>
                        
                        <div class="metric">
                            <span class="metric-label">Á∑èGPU „É°„É¢„É™</span>
                            <span class="metric-value">${(totalMemory / 1024 / 1024 / 1024).toFixed(1)} GB</span>
                        </div>
                        
                        ${driverVersions.size > 0 ? `
                            <div class="metric">
                                <span class="metric-label">NVIDIA „Éâ„É©„Ç§„Éê„Éº</span>
                                <span class="metric-value">${Array.from(driverVersions).join(', ')}</span>
                            </div>
                        ` : ''}

                        <div style="margin-top: 20px;">
                            <h4 style="color: #667eea; margin-bottom: 15px;">üìä GPU „É¢„Éá„É´Âà•Ë©≥Á¥∞</h4>
                            ${Array.from(gpuModels.entries()).map(([model, info]) => `
                                <div style="margin-bottom: 15px; padding: 15px; background: rgba(102, 126, 234, 0.05); border-radius: 8px; border-left: 4px solid #667eea;">
                                    <div style="font-weight: bold; color: #333; margin-bottom: 10px;">
                                        ${model} √ó ${info.count}
                                    </div>
                                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; font-size: 0.9rem;">
                                        <div>
                                            <span style="color: #666;">„É°„É¢„É™/GPU:</span>
                                            <span style="font-weight: 600; color: #667eea;">
                                                ${(info.totalMemory / info.count / 1024 / 1024 / 1024).toFixed(1)} GB
                                            </span>
                                        </div>
                                        ${info.computeCapability ? `
                                            <div>
                                                <span style="color: #666;">Compute Capability:</span>
                                                <span style="font-weight: 600; color: #667eea;">${info.computeCapability}</span>
                                            </div>
                                        ` : ''}
                                        ${info.powerLimit > 0 ? `
                                            <div>
                                                <span style="color: #666;">ÈõªÂäõÂà∂Èôê:</span>
                                                <span style="font-weight: 600; color: #667eea;">${info.powerLimit.toFixed(0)} W</span>
                                            </div>
                                        ` : ''}
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    `;

                    return card;
                }

                createNodeCard(node) {
                    const card = document.createElement('div');
                    card.className = 'card';

                    const gpuList = Array.from(node.gpus.values());
                    const avgUtilization = gpuList.reduce((sum, gpu) => sum + gpu.utilization, 0) / gpuList.length || 0;

                    card.innerHTML = `
                        <h3>üñ•Ô∏è „Éé„Éº„Éâ: ${node.name}</h3>
                        <div class="metric">
                            <span class="metric-label">„Çπ„ÉÜ„Éº„Çø„Çπ</span>
                            <span class="status ${node.status}">${node.status === 'online' ? '„Ç™„É≥„É©„Ç§„É≥' : '„Ç™„Éï„É©„Ç§„É≥'}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">GPUÊï∞</span>
                            <span class="metric-value">${gpuList.length}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">Âπ≥ÂùáGPU‰ΩøÁî®Áéá</span>
                            <span class="metric-value">${avgUtilization.toFixed(1)}%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${avgUtilization}%"></div>
                        </div>
                        ${gpuList.map(gpu => `
                            <div style="margin-top: 15px; padding: 10px; background: rgba(0,0,0,0.05); border-radius: 8px;">
                                <strong>GPU ${gpu.id}</strong>
                                <div class="metric">
                                    <span class="metric-label">‰ΩøÁî®Áéá</span>
                                    <span class="metric-value">${gpu.utilization.toFixed(1)}%</span>
                                </div>
                            </div>
                        `).join('')}
                    `;

                    return card;
                }

                createPodCard(podData) {
                    const card = document.createElement('div');
                    card.className = 'card';

                    card.innerHTML = `
                        <h3>üöÄ „Éù„ÉÉ„Éâ GPU‰ΩøÁî®Áä∂Ê≥Å</h3>
                        ${podData.map(pod => `
                            <div style="margin-bottom: 15px; padding: 10px; background: rgba(0,0,0,0.05); border-radius: 8px;">
                                <strong>${pod.name}</strong>
                                <div class="metric">
                                    <span class="metric-label">„Éé„Éº„Éâ</span>
                                    <span class="metric-value">${pod.node}</span>
                                </div>
                                ${Array.from(pod.gpus.values()).map(gpu => `
                                    <div class="metric">
                                        <span class="metric-label">GPU ${gpu.id} ‰ΩøÁî®Áéá</span>
                                        <span class="metric-value">${gpu.utilization.toFixed(1)}%</span>
                                    </div>
                                `).join('')}
                            </div>
                        `).join('')}
                    `;

                    return card;
                }

                startAutoRefresh() {
                    if (this.autoRefreshTimer) {
                        clearInterval(this.autoRefreshTimer);
                    }
                    
                    this.autoRefreshTimer = setInterval(() => {
                        this.loadData();
                    }, this.refreshInterval);
                }

                stopAutoRefresh() {
                    if (this.autoRefreshTimer) {
                        clearInterval(this.autoRefreshTimer);
                        this.autoRefreshTimer = null;
                    }
                }
            }

            function refreshData() {
                if (window.gpuMonitor) {
                    window.gpuMonitor.loadData();
                }
            }

            document.addEventListener('DOMContentLoaded', () => {
                window.gpuMonitor = new GPUMonitor();
            });

            window.addEventListener('beforeunload', () => {
                if (window.gpuMonitor) {
                    window.gpuMonitor.stopAutoRefresh();
                }
            });
        </script>
    </body>
    </html>

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gpu-monitor-ui
  namespace: gpu-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gpu-monitor-ui
  template:
    metadata:
      labels:
        app: gpu-monitor-ui
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: ui-config
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
      volumes:
      - name: ui-config
        configMap:
          name: gpu-monitor-ui-config
      - name: nginx-config
        configMap:
          name: nginx-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: gpu-monitoring
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }
        
        location /api/prometheus/ {
            proxy_pass http://prometheus:9090/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

---
apiVersion: v1
kind: Service
metadata:
  name: gpu-monitor-ui
  namespace: gpu-monitoring
spec:
  selector:
    app: gpu-monitor-ui
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30080
      protocol: TCP
      name: http
---
apiVersion: v1
kind: Service
metadata:
  name: gpu-monitor-ui-external
  namespace: gpu-monitoring
spec:
  selector:
    app: gpu-monitor-ui
  type: LoadBalancer
  ports:
    - port: 8080
      targetPort: 80
      protocol: TCP
      name: http